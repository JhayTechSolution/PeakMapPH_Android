#include "aeshelper.h"
#include <cstring>
#include <QDebug>

static const uint8_t Rcon[11] = {
    0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36
};

const uint8_t AESHelper::sbox[256] = {
    0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
    0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
    0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
    0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
    0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
    0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
    0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
    0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
    0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
    0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
    0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
    0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
    0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
    0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
    0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
    0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16
};

const uint8_t AESHelper::rsbox[256] = {
    0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB,
    0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB,
    0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E,
    0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25,
    0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92,
    0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84,
    0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06,
    0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B,
    0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73,
    0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E,
    0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B,
    0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4,
    0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F,
    0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF,
    0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61,
    0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D
};


uint8_t AESHelper::xtime(uint8_t x) {
    return (uint8_t)((x << 1) ^ ((x & 0x80) ? 0x1B : 0x00));
}
uint8_t AESHelper::mul(uint8_t a, uint8_t b) {
    uint8_t res = 0;
    while (b) {
        if (b & 1) res ^= a;
        a = xtime(a);
        b >>= 1;
    }
    return res;
}

void AESHelper::keyExpansion(const uint8_t *key) {

    memcpy(roundKey_.data(), key, 16);
    uint8_t temp[4];
    int i = 16;
    int rconIter = 1;

    while (i < 176) {
        memcpy(temp, &roundKey_[i - 4], 4);

        if (i % 16 == 0) {
            // rotate
            uint8_t t = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = t;
            // subbytes
            temp[0] = sbox[temp[0]];
            temp[1] = sbox[temp[1]];
            temp[2] = sbox[temp[2]];
            temp[3] = sbox[temp[3]];
            // Rcon
            temp[0] ^= Rcon[rconIter++];
        }

        for (int k = 0; k < 4; ++k) {
            roundKey_[i] = roundKey_[i - 16] ^ temp[k];
            ++i;
        }
    }
}

void AESHelper::addRoundKey(uint8_t *state, const uint8_t *roundKey) {
    for (int i = 0; i < 16; ++i) state[i] ^= roundKey[i];
}

void AESHelper::subBytes(uint8_t *state) {
    for (int i = 0; i < 16; ++i) state[i] = sbox[state[i]];
}
void AESHelper::invSubBytes(uint8_t *state) {
    for (int i = 0; i < 16; ++i) state[i] = rsbox[state[i]];
}

void AESHelper::shiftRows(uint8_t *s) {
    uint8_t tmp[16];

    tmp[0] = s[0]; tmp[4] = s[4]; tmp[8] = s[8]; tmp[12] = s[12];

    tmp[1] = s[5]; tmp[5] = s[9]; tmp[9] = s[13]; tmp[13] = s[1];

    tmp[2] = s[10]; tmp[6] = s[14]; tmp[10] = s[2]; tmp[14] = s[6];

    tmp[3] = s[15]; tmp[7] = s[3]; tmp[11] = s[7]; tmp[15] = s[11];
    memcpy(s, tmp, 16);
}
void AESHelper::invShiftRows(uint8_t *s) {
    uint8_t tmp[16];
    tmp[0] = s[0]; tmp[4] = s[4]; tmp[8] = s[8]; tmp[12] = s[12];
    tmp[1] = s[13]; tmp[5] = s[1]; tmp[9] = s[5]; tmp[13] = s[9];
    tmp[2] = s[10]; tmp[6] = s[14]; tmp[10] = s[2]; tmp[14] = s[6];
    tmp[3] = s[7]; tmp[7] = s[11]; tmp[11] = s[15]; tmp[15] = s[3];
    memcpy(s, tmp, 16);
}

void AESHelper::mixColumns(uint8_t *s) {
    for (int i = 0; i < 4; ++i) {
        int col = i * 4;
        uint8_t a0 = s[col], a1 = s[col + 1], a2 = s[col + 2], a3 = s[col + 3];
        s[col]     = (uint8_t)(mul(0x02, a0) ^ mul(0x03, a1) ^ a2 ^ a3);
        s[col + 1] = (uint8_t)(a0 ^ mul(0x02, a1) ^ mul(0x03, a2) ^ a3);
        s[col + 2] = (uint8_t)(a0 ^ a1 ^ mul(0x02, a2) ^ mul(0x03, a3));
        s[col + 3] = (uint8_t)(mul(0x03, a0) ^ a1 ^ a2 ^ mul(0x02, a3));
    }
}

void AESHelper::invMixColumns(uint8_t *s) {
    for (int i = 0; i < 4; ++i) {
        int col = i * 4;
        uint8_t a0 = s[col], a1 = s[col+1], a2 = s[col+2], a3 = s[col+3];
        s[col]     = (uint8_t)(mul(0x0e,a0) ^ mul(0x0b,a1) ^ mul(0x0d,a2) ^ mul(0x09,a3));
        s[col+1]   = (uint8_t)(mul(0x09,a0) ^ mul(0x0e,a1) ^ mul(0x0b,a2) ^ mul(0x0d,a3));
        s[col+2]   = (uint8_t)(mul(0x0d,a0) ^ mul(0x09,a1) ^ mul(0x0e,a2) ^ mul(0x0b,a3));
        s[col+3]   = (uint8_t)(mul(0x0b,a0) ^ mul(0x0d,a1) ^ mul(0x09,a2) ^ mul(0x0e,a3));
    }
}

void AESHelper::aesEncryptBlock(const uint8_t *in, uint8_t *out) {
    uint8_t state[16];
    memcpy(state, in, 16);

    addRoundKey(state, roundKey_.data());

    for (int round = 1; round <= 9; ++round) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, roundKey_.data() + (16 * round));
    }


    subBytes(state);
    shiftRows(state);
    addRoundKey(state, roundKey_.data() + 160);

    memcpy(out, state, 16);
}

void AESHelper::aesDecryptBlock(const uint8_t *in, uint8_t *out) {
    uint8_t state[16];
    memcpy(state, in, 16);

    addRoundKey(state, roundKey_.data() + 160);
    invShiftRows(state);
    invSubBytes(state);

    for (int round = 9; round >= 1; --round) {
        addRoundKey(state, roundKey_.data() + (16 * round));
        invMixColumns(state);
        invShiftRows(state);
        invSubBytes(state);
    }

    addRoundKey(state, roundKey_.data());
    memcpy(out, state, 16);
}
void AESHelper::createPasskeyExpansion(){
    QByteArray key = this->passkey.toUtf8();
    uint8_t k[16] = {0};
    int len = key.size();
    if (len >= 16) memcpy(k, key.constData(), 16);
    else {
        memcpy(k, key.constData(), len);
        for (int i = len; i < 16; ++i) k[i] = ' ';
    }
    keyExpansion(k);
}

void AESHelper::setPasskey(QString passkey) {
    this->passkey = passkey;
   emit passkeyChanged();
    createPasskeyExpansion();
}

AESHelper::AESHelper(QObject *parent): QObject{parent}{

}


QString AESHelper::getPasskey(){
    return this->passkey;
}

QString AESHelper::encrypt(const QByteArray &plain) {
    QByteArray data = plain;

    qDebug() << data;
    // Calculate padding
    int pad_len = (16 - (data.size() % 16)) % 16;
    if (pad_len == 0) pad_len = 16;
    data.append(QByteArray(pad_len, ' '));  // Padding with spaces

    qDebug() << "Data after padding:" << data;

    QByteArray out;
    out.resize(data.size());

    uint8_t buf[16];
    for (int i = 0; i < data.size(); i += 16) {
        aesEncryptBlock(reinterpret_cast<const uint8_t*>(data.constData() + i), buf);
        memcpy(out.data() + i, buf, 16);
    }
    qDebug() <<out;

    qDebug() << "Encrypted data size (before base64):" << out.size();
    return out.toBase64();
}

QString AESHelper::decrypt(const QByteArray &plain) {
    qDebug() << "DECRYPTING " << plain.length();
    auto cipher = QByteArray::fromBase64(plain);

    if (cipher.isEmpty() || (cipher.size() % 16) != 0) return QByteArray();

    QByteArray out;
    out.resize(cipher.size());
    uint8_t buf[16];
    for (int i = 0; i < cipher.size(); i += 16) {
        aesDecryptBlock(reinterpret_cast<const uint8_t*>(cipher.constData() + i), buf);
        memcpy(out.data() + i, buf, 16);
    }
    while (!out.isEmpty() && out.endsWith(' ')) out.chop(1);
    qDebug() << out;
    return out;
}
